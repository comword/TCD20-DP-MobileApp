// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: student.proto
#ifndef GRPC_student_2eproto__INCLUDED
#define GRPC_student_2eproto__INCLUDED

#include "student.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace student {

class StudentApp final {
 public:
  static constexpr char const* service_full_name() {
    return "student.StudentApp";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::student::CommonGetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::CommonGetResponse>> AsyncUpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::CommonGetResponse>>(AsyncUpPredictResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::CommonGetResponse>> PrepareAsyncUpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::CommonGetResponse>>(PrepareAsyncUpPredictResultRaw(context, request, cq));
    }
    // return predictId
    virtual ::grpc::Status GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::student::ExamResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::ExamResponse>> AsyncGetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::ExamResponse>>(AsyncGetExamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::ExamResponse>> PrepareAsyncGetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::ExamResponse>>(PrepareAsyncGetExamsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::student::GetPredictResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::GetPredictResponse>> AsyncGetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::GetPredictResponse>>(AsyncGetPredictsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::GetPredictResponse>> PrepareAsyncGetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::student::GetPredictResponse>>(PrepareAsyncGetPredictsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::student::StreamVideoRequest, ::student::CommonGetResponse>> StreamVideo(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::student::StreamVideoRequest, ::student::CommonGetResponse>>(StreamVideoRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::student::StreamVideoRequest, ::student::CommonGetResponse>> AsyncStreamVideo(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::student::StreamVideoRequest, ::student::CommonGetResponse>>(AsyncStreamVideoRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::student::StreamVideoRequest, ::student::CommonGetResponse>> PrepareAsyncStreamVideo(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::student::StreamVideoRequest, ::student::CommonGetResponse>>(PrepareAsyncStreamVideoRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // return predictId
      virtual void GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StreamVideo(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::student::StreamVideoRequest,::student::CommonGetResponse>* reactor) = 0;
      #else
      virtual void StreamVideo(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::student::StreamVideoRequest,::student::CommonGetResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::student::CommonGetResponse>* AsyncUpPredictResultRaw(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::student::CommonGetResponse>* PrepareAsyncUpPredictResultRaw(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::student::ExamResponse>* AsyncGetExamsRaw(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::student::ExamResponse>* PrepareAsyncGetExamsRaw(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::student::GetPredictResponse>* AsyncGetPredictsRaw(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::student::GetPredictResponse>* PrepareAsyncGetPredictsRaw(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::student::StreamVideoRequest, ::student::CommonGetResponse>* StreamVideoRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::student::StreamVideoRequest, ::student::CommonGetResponse>* AsyncStreamVideoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::student::StreamVideoRequest, ::student::CommonGetResponse>* PrepareAsyncStreamVideoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::student::CommonGetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::CommonGetResponse>> AsyncUpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::CommonGetResponse>>(AsyncUpPredictResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::CommonGetResponse>> PrepareAsyncUpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::CommonGetResponse>>(PrepareAsyncUpPredictResultRaw(context, request, cq));
    }
    ::grpc::Status GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::student::ExamResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::ExamResponse>> AsyncGetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::ExamResponse>>(AsyncGetExamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::ExamResponse>> PrepareAsyncGetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::ExamResponse>>(PrepareAsyncGetExamsRaw(context, request, cq));
    }
    ::grpc::Status GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::student::GetPredictResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::GetPredictResponse>> AsyncGetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::GetPredictResponse>>(AsyncGetPredictsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::GetPredictResponse>> PrepareAsyncGetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::student::GetPredictResponse>>(PrepareAsyncGetPredictsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>> StreamVideo(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>>(StreamVideoRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>> AsyncStreamVideo(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>>(AsyncStreamVideoRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>> PrepareAsyncStreamVideo(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>>(PrepareAsyncStreamVideoRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StreamVideo(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::student::StreamVideoRequest,::student::CommonGetResponse>* reactor) override;
      #else
      void StreamVideo(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::student::StreamVideoRequest,::student::CommonGetResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::student::CommonGetResponse>* AsyncUpPredictResultRaw(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::student::CommonGetResponse>* PrepareAsyncUpPredictResultRaw(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::student::ExamResponse>* AsyncGetExamsRaw(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::student::ExamResponse>* PrepareAsyncGetExamsRaw(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::student::GetPredictResponse>* AsyncGetPredictsRaw(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::student::GetPredictResponse>* PrepareAsyncGetPredictsRaw(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>* StreamVideoRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>* AsyncStreamVideoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>* PrepareAsyncStreamVideoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UpPredictResult_;
    const ::grpc::internal::RpcMethod rpcmethod_GetExams_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPredicts_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamVideo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UpPredictResult(::grpc::ServerContext* context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response);
    // return predictId
    virtual ::grpc::Status GetExams(::grpc::ServerContext* context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response);
    virtual ::grpc::Status GetPredicts(::grpc::ServerContext* context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response);
    virtual ::grpc::Status StreamVideo(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::student::CommonGetResponse, ::student::StreamVideoRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_UpPredictResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpPredictResult() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UpPredictResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpPredictResult(::grpc::ServerContext* /*context*/, const ::student::ModelPredict* /*request*/, ::student::CommonGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpPredictResult(::grpc::ServerContext* context, ::student::ModelPredict* request, ::grpc::ServerAsyncResponseWriter< ::student::CommonGetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetExams() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExams(::grpc::ServerContext* /*context*/, const ::student::CommonGetRequest* /*request*/, ::student::ExamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExams(::grpc::ServerContext* context, ::student::CommonGetRequest* request, ::grpc::ServerAsyncResponseWriter< ::student::ExamResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPredicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPredicts() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPredicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPredicts(::grpc::ServerContext* /*context*/, const ::student::GetPredictRequest* /*request*/, ::student::GetPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPredicts(::grpc::ServerContext* context, ::student::GetPredictRequest* request, ::grpc::ServerAsyncResponseWriter< ::student::GetPredictResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamVideo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::student::CommonGetResponse, ::student::StreamVideoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamVideo(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::student::CommonGetResponse, ::student::StreamVideoRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UpPredictResult<WithAsyncMethod_GetExams<WithAsyncMethod_GetPredicts<WithAsyncMethod_StreamVideo<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpPredictResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpPredictResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::student::ModelPredict, ::student::CommonGetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response) { return this->UpPredictResult(context, request, response); }));}
    void SetMessageAllocatorFor_UpPredictResult(
        ::grpc::experimental::MessageAllocator< ::student::ModelPredict, ::student::CommonGetResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::student::ModelPredict, ::student::CommonGetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpPredictResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpPredictResult(::grpc::ServerContext* /*context*/, const ::student::ModelPredict* /*request*/, ::student::CommonGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpPredictResult(
      ::grpc::CallbackServerContext* /*context*/, const ::student::ModelPredict* /*request*/, ::student::CommonGetResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpPredictResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::student::ModelPredict* /*request*/, ::student::CommonGetResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetExams() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::student::CommonGetRequest, ::student::ExamResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response) { return this->GetExams(context, request, response); }));}
    void SetMessageAllocatorFor_GetExams(
        ::grpc::experimental::MessageAllocator< ::student::CommonGetRequest, ::student::ExamResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::student::CommonGetRequest, ::student::ExamResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExams(::grpc::ServerContext* /*context*/, const ::student::CommonGetRequest* /*request*/, ::student::ExamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetExams(
      ::grpc::CallbackServerContext* /*context*/, const ::student::CommonGetRequest* /*request*/, ::student::ExamResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetExams(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::student::CommonGetRequest* /*request*/, ::student::ExamResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPredicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPredicts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::student::GetPredictRequest, ::student::GetPredictResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response) { return this->GetPredicts(context, request, response); }));}
    void SetMessageAllocatorFor_GetPredicts(
        ::grpc::experimental::MessageAllocator< ::student::GetPredictRequest, ::student::GetPredictResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::student::GetPredictRequest, ::student::GetPredictResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPredicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPredicts(::grpc::ServerContext* /*context*/, const ::student::GetPredictRequest* /*request*/, ::student::GetPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPredicts(
      ::grpc::CallbackServerContext* /*context*/, const ::student::GetPredictRequest* /*request*/, ::student::GetPredictResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPredicts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::student::GetPredictRequest* /*request*/, ::student::GetPredictResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StreamVideo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::student::StreamVideoRequest, ::student::CommonGetResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->StreamVideo(context); }));
    }
    ~ExperimentalWithCallbackMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::student::CommonGetResponse, ::student::StreamVideoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::student::StreamVideoRequest, ::student::CommonGetResponse>* StreamVideo(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::student::StreamVideoRequest, ::student::CommonGetResponse>* StreamVideo(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_UpPredictResult<ExperimentalWithCallbackMethod_GetExams<ExperimentalWithCallbackMethod_GetPredicts<ExperimentalWithCallbackMethod_StreamVideo<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_UpPredictResult<ExperimentalWithCallbackMethod_GetExams<ExperimentalWithCallbackMethod_GetPredicts<ExperimentalWithCallbackMethod_StreamVideo<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UpPredictResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpPredictResult() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UpPredictResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpPredictResult(::grpc::ServerContext* /*context*/, const ::student::ModelPredict* /*request*/, ::student::CommonGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetExams() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExams(::grpc::ServerContext* /*context*/, const ::student::CommonGetRequest* /*request*/, ::student::ExamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPredicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPredicts() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPredicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPredicts(::grpc::ServerContext* /*context*/, const ::student::GetPredictRequest* /*request*/, ::student::GetPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamVideo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::student::CommonGetResponse, ::student::StreamVideoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpPredictResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpPredictResult() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UpPredictResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpPredictResult(::grpc::ServerContext* /*context*/, const ::student::ModelPredict* /*request*/, ::student::CommonGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpPredictResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetExams() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExams(::grpc::ServerContext* /*context*/, const ::student::CommonGetRequest* /*request*/, ::student::ExamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetExams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPredicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPredicts() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetPredicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPredicts(::grpc::ServerContext* /*context*/, const ::student::GetPredictRequest* /*request*/, ::student::GetPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPredicts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamVideo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::student::CommonGetResponse, ::student::StreamVideoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamVideo(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpPredictResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpPredictResult() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpPredictResult(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpPredictResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpPredictResult(::grpc::ServerContext* /*context*/, const ::student::ModelPredict* /*request*/, ::student::CommonGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpPredictResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpPredictResult(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetExams() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetExams(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetExams(::grpc::ServerContext* /*context*/, const ::student::CommonGetRequest* /*request*/, ::student::ExamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetExams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetExams(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPredicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPredicts() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPredicts(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPredicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPredicts(::grpc::ServerContext* /*context*/, const ::student::GetPredictRequest* /*request*/, ::student::GetPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPredicts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPredicts(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StreamVideo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->StreamVideo(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::student::CommonGetResponse, ::student::StreamVideoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamVideo(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamVideo(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpPredictResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpPredictResult() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::student::ModelPredict, ::student::CommonGetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::student::ModelPredict, ::student::CommonGetResponse>* streamer) {
                       return this->StreamedUpPredictResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpPredictResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpPredictResult(::grpc::ServerContext* /*context*/, const ::student::ModelPredict* /*request*/, ::student::CommonGetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpPredictResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::student::ModelPredict,::student::CommonGetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetExams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetExams() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::student::CommonGetRequest, ::student::ExamResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::student::CommonGetRequest, ::student::ExamResponse>* streamer) {
                       return this->StreamedGetExams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetExams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetExams(::grpc::ServerContext* /*context*/, const ::student::CommonGetRequest* /*request*/, ::student::ExamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetExams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::student::CommonGetRequest,::student::ExamResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPredicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPredicts() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::student::GetPredictRequest, ::student::GetPredictResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::student::GetPredictRequest, ::student::GetPredictResponse>* streamer) {
                       return this->StreamedGetPredicts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPredicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPredicts(::grpc::ServerContext* /*context*/, const ::student::GetPredictRequest* /*request*/, ::student::GetPredictResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPredicts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::student::GetPredictRequest,::student::GetPredictResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UpPredictResult<WithStreamedUnaryMethod_GetExams<WithStreamedUnaryMethod_GetPredicts<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UpPredictResult<WithStreamedUnaryMethod_GetExams<WithStreamedUnaryMethod_GetPredicts<Service > > > StreamedService;
};

}  // namespace student


#endif  // GRPC_student_2eproto__INCLUDED
