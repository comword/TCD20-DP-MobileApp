// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: student.proto

#include "student.pb.h"
#include "student.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace student {

static const char* StudentApp_method_names[] = {
  "/student.StudentApp/UpPredictResult",
  "/student.StudentApp/GetExams",
  "/student.StudentApp/GetPredicts",
  "/student.StudentApp/StreamVideo",
};

std::unique_ptr< StudentApp::Stub> StudentApp::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StudentApp::Stub> stub(new StudentApp::Stub(channel, options));
  return stub;
}

StudentApp::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UpPredictResult_(StudentApp_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetExams_(StudentApp_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPredicts_(StudentApp_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamVideo_(StudentApp_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status StudentApp::Stub::UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::student::CommonGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::student::ModelPredict, ::student::CommonGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpPredictResult_, context, request, response);
}

void StudentApp::Stub::experimental_async::UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::student::ModelPredict, ::student::CommonGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpPredictResult_, context, request, response, std::move(f));
}

void StudentApp::Stub::experimental_async::UpPredictResult(::grpc::ClientContext* context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpPredictResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::student::CommonGetResponse>* StudentApp::Stub::PrepareAsyncUpPredictResultRaw(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::student::CommonGetResponse, ::student::ModelPredict, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpPredictResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::student::CommonGetResponse>* StudentApp::Stub::AsyncUpPredictResultRaw(::grpc::ClientContext* context, const ::student::ModelPredict& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpPredictResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StudentApp::Stub::GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::student::ExamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::student::CommonGetRequest, ::student::ExamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetExams_, context, request, response);
}

void StudentApp::Stub::experimental_async::GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::student::CommonGetRequest, ::student::ExamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExams_, context, request, response, std::move(f));
}

void StudentApp::Stub::experimental_async::GetExams(::grpc::ClientContext* context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetExams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::student::ExamResponse>* StudentApp::Stub::PrepareAsyncGetExamsRaw(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::student::ExamResponse, ::student::CommonGetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetExams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::student::ExamResponse>* StudentApp::Stub::AsyncGetExamsRaw(::grpc::ClientContext* context, const ::student::CommonGetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetExamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StudentApp::Stub::GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::student::GetPredictResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::student::GetPredictRequest, ::student::GetPredictResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPredicts_, context, request, response);
}

void StudentApp::Stub::experimental_async::GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::student::GetPredictRequest, ::student::GetPredictResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPredicts_, context, request, response, std::move(f));
}

void StudentApp::Stub::experimental_async::GetPredicts(::grpc::ClientContext* context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPredicts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::student::GetPredictResponse>* StudentApp::Stub::PrepareAsyncGetPredictsRaw(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::student::GetPredictResponse, ::student::GetPredictRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPredicts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::student::GetPredictResponse>* StudentApp::Stub::AsyncGetPredictsRaw(::grpc::ClientContext* context, const ::student::GetPredictRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPredictsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>* StudentApp::Stub::StreamVideoRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::student::StreamVideoRequest, ::student::CommonGetResponse>::Create(channel_.get(), rpcmethod_StreamVideo_, context);
}

void StudentApp::Stub::experimental_async::StreamVideo(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::student::StreamVideoRequest,::student::CommonGetResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::student::StreamVideoRequest,::student::CommonGetResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamVideo_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>* StudentApp::Stub::AsyncStreamVideoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::student::StreamVideoRequest, ::student::CommonGetResponse>::Create(channel_.get(), cq, rpcmethod_StreamVideo_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::student::StreamVideoRequest, ::student::CommonGetResponse>* StudentApp::Stub::PrepareAsyncStreamVideoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::student::StreamVideoRequest, ::student::CommonGetResponse>::Create(channel_.get(), cq, rpcmethod_StreamVideo_, context, false, nullptr);
}

StudentApp::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StudentApp_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StudentApp::Service, ::student::ModelPredict, ::student::CommonGetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StudentApp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::student::ModelPredict* req,
             ::student::CommonGetResponse* resp) {
               return service->UpPredictResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StudentApp_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StudentApp::Service, ::student::CommonGetRequest, ::student::ExamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StudentApp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::student::CommonGetRequest* req,
             ::student::ExamResponse* resp) {
               return service->GetExams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StudentApp_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StudentApp::Service, ::student::GetPredictRequest, ::student::GetPredictResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StudentApp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::student::GetPredictRequest* req,
             ::student::GetPredictResponse* resp) {
               return service->GetPredicts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StudentApp_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< StudentApp::Service, ::student::StreamVideoRequest, ::student::CommonGetResponse>(
          [](StudentApp::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::student::CommonGetResponse,
             ::student::StreamVideoRequest>* stream) {
               return service->StreamVideo(ctx, stream);
             }, this)));
}

StudentApp::Service::~Service() {
}

::grpc::Status StudentApp::Service::UpPredictResult(::grpc::ServerContext* context, const ::student::ModelPredict* request, ::student::CommonGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StudentApp::Service::GetExams(::grpc::ServerContext* context, const ::student::CommonGetRequest* request, ::student::ExamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StudentApp::Service::GetPredicts(::grpc::ServerContext* context, const ::student::GetPredictRequest* request, ::student::GetPredictResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StudentApp::Service::StreamVideo(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::student::CommonGetResponse, ::student::StreamVideoRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace student

