// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: student.proto

#include "student.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace student {
constexpr CommonGetRequest::CommonGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CommonGetRequestDefaultTypeInternal {
  constexpr CommonGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonGetRequestDefaultTypeInternal() {}
  union {
    CommonGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonGetRequestDefaultTypeInternal _CommonGetRequest_default_instance_;
constexpr CommonGetResponse::CommonGetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0){}
struct CommonGetResponseDefaultTypeInternal {
  constexpr CommonGetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommonGetResponseDefaultTypeInternal() {}
  union {
    CommonGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommonGetResponseDefaultTypeInternal _CommonGetResponse_default_instance_;
constexpr ExamDetail_AdditionInfoEntry_DoNotUse::ExamDetail_AdditionInfoEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ExamDetail_AdditionInfoEntry_DoNotUseDefaultTypeInternal {
  constexpr ExamDetail_AdditionInfoEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExamDetail_AdditionInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ExamDetail_AdditionInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExamDetail_AdditionInfoEntry_DoNotUseDefaultTypeInternal _ExamDetail_AdditionInfoEntry_DoNotUse_default_instance_;
constexpr ExamDetail::ExamDetail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : additioninfo_()
  , predictid_()
  , examid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , examname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , starttime_(nullptr)
  , endtime_(nullptr){}
struct ExamDetailDefaultTypeInternal {
  constexpr ExamDetailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExamDetailDefaultTypeInternal() {}
  union {
    ExamDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExamDetailDefaultTypeInternal _ExamDetail_default_instance_;
constexpr ExamResponse::ExamResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pendingexams_()
  , finishedexams_(){}
struct ExamResponseDefaultTypeInternal {
  constexpr ExamResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExamResponseDefaultTypeInternal() {}
  union {
    ExamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExamResponseDefaultTypeInternal _ExamResponse_default_instance_;
constexpr ModelPredict_ResultEntry_DoNotUse::ModelPredict_ResultEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ModelPredict_ResultEntry_DoNotUseDefaultTypeInternal {
  constexpr ModelPredict_ResultEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelPredict_ResultEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ModelPredict_ResultEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelPredict_ResultEntry_DoNotUseDefaultTypeInternal _ModelPredict_ResultEntry_DoNotUse_default_instance_;
constexpr ModelPredict::ModelPredict(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_()
  , examid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , studentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_(nullptr){}
struct ModelPredictDefaultTypeInternal {
  constexpr ModelPredictDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelPredictDefaultTypeInternal() {}
  union {
    ModelPredict _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelPredictDefaultTypeInternal _ModelPredict_default_instance_;
constexpr GetPredictRequest::GetPredictRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predictid_(){}
struct GetPredictRequestDefaultTypeInternal {
  constexpr GetPredictRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPredictRequestDefaultTypeInternal() {}
  union {
    GetPredictRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPredictRequestDefaultTypeInternal _GetPredictRequest_default_instance_;
constexpr GetPredictResponse_ResultEntry_DoNotUse::GetPredictResponse_ResultEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetPredictResponse_ResultEntry_DoNotUseDefaultTypeInternal {
  constexpr GetPredictResponse_ResultEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPredictResponse_ResultEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetPredictResponse_ResultEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPredictResponse_ResultEntry_DoNotUseDefaultTypeInternal _GetPredictResponse_ResultEntry_DoNotUse_default_instance_;
constexpr GetPredictResponse::GetPredictResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(){}
struct GetPredictResponseDefaultTypeInternal {
  constexpr GetPredictResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPredictResponseDefaultTypeInternal() {}
  union {
    GetPredictResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPredictResponseDefaultTypeInternal _GetPredictResponse_default_instance_;
constexpr MetaData::MetaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : examid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MetaDataDefaultTypeInternal {
  constexpr MetaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetaDataDefaultTypeInternal() {}
  union {
    MetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetaDataDefaultTypeInternal _MetaData_default_instance_;
constexpr StreamVideoRequest::StreamVideoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StreamVideoRequestDefaultTypeInternal {
  constexpr StreamVideoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamVideoRequestDefaultTypeInternal() {}
  union {
    StreamVideoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamVideoRequestDefaultTypeInternal _StreamVideoRequest_default_instance_;
}  // namespace student
namespace student {

// ===================================================================

class CommonGetRequest::_Internal {
 public:
};

CommonGetRequest::CommonGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:student.CommonGetRequest)
}
CommonGetRequest::CommonGetRequest(const CommonGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:student.CommonGetRequest)
}

void CommonGetRequest::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommonGetRequest::~CommonGetRequest() {
  // @@protoc_insertion_point(destructor:student.CommonGetRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CommonGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonGetRequest::ArenaDtor(void* object) {
  CommonGetRequest* _this = reinterpret_cast< CommonGetRequest* >(object);
  (void)_this;
}
void CommonGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:student.CommonGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* CommonGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonGetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.CommonGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.CommonGetRequest.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.CommonGetRequest)
  return target;
}

size_t CommonGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.CommonGetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonGetRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommonGetRequest*>(
      &from));
}

void CommonGetRequest::MergeFrom(const CommonGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.CommonGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
}

void CommonGetRequest::CopyFrom(const CommonGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.CommonGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonGetRequest::IsInitialized() const {
  return true;
}

void CommonGetRequest::InternalSwap(CommonGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string CommonGetRequest::GetTypeName() const {
  return "student.CommonGetRequest";
}


// ===================================================================

class CommonGetResponse::_Internal {
 public:
};

CommonGetResponse::CommonGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:student.CommonGetResponse)
}
CommonGetResponse::CommonGetResponse(const CommonGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:student.CommonGetResponse)
}

void CommonGetResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_ = 0;
}

CommonGetResponse::~CommonGetResponse() {
  // @@protoc_insertion_point(destructor:student.CommonGetResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void CommonGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommonGetResponse::ArenaDtor(void* object) {
  CommonGetResponse* _this = reinterpret_cast< CommonGetResponse* >(object);
  (void)_this;
}
void CommonGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:student.CommonGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  code_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* CommonGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonGetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.CommonGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.CommonGetResponse.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.CommonGetResponse)
  return target;
}

size_t CommonGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.CommonGetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonGetResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommonGetResponse*>(
      &from));
}

void CommonGetResponse::MergeFrom(const CommonGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.CommonGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {
    _internal_set_msg(from._internal_msg());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void CommonGetResponse::CopyFrom(const CommonGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.CommonGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonGetResponse::IsInitialized() const {
  return true;
}

void CommonGetResponse::InternalSwap(CommonGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(code_, other->code_);
}

std::string CommonGetResponse::GetTypeName() const {
  return "student.CommonGetResponse";
}


// ===================================================================

ExamDetail_AdditionInfoEntry_DoNotUse::ExamDetail_AdditionInfoEntry_DoNotUse() {}
ExamDetail_AdditionInfoEntry_DoNotUse::ExamDetail_AdditionInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExamDetail_AdditionInfoEntry_DoNotUse::MergeFrom(const ExamDetail_AdditionInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class ExamDetail::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& starttime(const ExamDetail* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& endtime(const ExamDetail* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ExamDetail::_Internal::starttime(const ExamDetail* msg) {
  return *msg->starttime_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ExamDetail::_Internal::endtime(const ExamDetail* msg) {
  return *msg->endtime_;
}
void ExamDetail::clear_starttime() {
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
}
void ExamDetail::clear_endtime() {
  if (GetArena() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
}
ExamDetail::ExamDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  additioninfo_(arena),
  predictid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:student.ExamDetail)
}
ExamDetail::ExamDetail(const ExamDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      predictid_(from.predictid_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  additioninfo_.MergeFrom(from.additioninfo_);
  examid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_examid().empty()) {
    examid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_examid(), 
      GetArena());
  }
  examname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_examname().empty()) {
    examname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_examname(), 
      GetArena());
  }
  if (from._internal_has_starttime()) {
    starttime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.starttime_);
  } else {
    starttime_ = nullptr;
  }
  if (from._internal_has_endtime()) {
    endtime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.endtime_);
  } else {
    endtime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:student.ExamDetail)
}

void ExamDetail::SharedCtor() {
examid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
examname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&starttime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endtime_) -
    reinterpret_cast<char*>(&starttime_)) + sizeof(endtime_));
}

ExamDetail::~ExamDetail() {
  // @@protoc_insertion_point(destructor:student.ExamDetail)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ExamDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  examid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  examname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete starttime_;
  if (this != internal_default_instance()) delete endtime_;
}

void ExamDetail::ArenaDtor(void* object) {
  ExamDetail* _this = reinterpret_cast< ExamDetail* >(object);
  (void)_this;
}
void ExamDetail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExamDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExamDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:student.ExamDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additioninfo_.Clear();
  predictid_.Clear();
  examid_.ClearToEmpty();
  examname_.ClearToEmpty();
  if (GetArena() == nullptr && starttime_ != nullptr) {
    delete starttime_;
  }
  starttime_ = nullptr;
  if (GetArena() == nullptr && endtime_ != nullptr) {
    delete endtime_;
  }
  endtime_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ExamDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string examId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_examid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string examName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_examname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp startTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_starttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp endTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_endtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> additionInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&additioninfo_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string predictId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_predictid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExamDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.ExamDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string examId = 1;
  if (this->examid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_examid().data(), static_cast<int>(this->_internal_examid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.ExamDetail.examId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_examid(), target);
  }

  // string examName = 2;
  if (this->examname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_examname().data(), static_cast<int>(this->_internal_examname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.ExamDetail.examName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_examname(), target);
  }

  // .google.protobuf.Timestamp startTime = 3;
  if (this->has_starttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::starttime(this), target, stream);
  }

  // .google.protobuf.Timestamp endTime = 4;
  if (this->has_endtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::endtime(this), target, stream);
  }

  // map<string, string> additionInfo = 5;
  if (!this->_internal_additioninfo().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "student.ExamDetail.AdditionInfoEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "student.ExamDetail.AdditionInfoEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_additioninfo().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_additioninfo().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_additioninfo().begin();
          it != this->_internal_additioninfo().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ExamDetail_AdditionInfoEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_additioninfo().begin();
          it != this->_internal_additioninfo().end(); ++it) {
        target = ExamDetail_AdditionInfoEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string predictId = 6;
  for (int i = 0, n = this->_internal_predictid_size(); i < n; i++) {
    const auto& s = this->_internal_predictid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.ExamDetail.predictId");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.ExamDetail)
  return target;
}

size_t ExamDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.ExamDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> additionInfo = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_additioninfo_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_additioninfo().begin();
      it != this->_internal_additioninfo().end(); ++it) {
    total_size += ExamDetail_AdditionInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string predictId = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(predictid_.size());
  for (int i = 0, n = predictid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      predictid_.Get(i));
  }

  // string examId = 1;
  if (this->examid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_examid());
  }

  // string examName = 2;
  if (this->examname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_examname());
  }

  // .google.protobuf.Timestamp startTime = 3;
  if (this->has_starttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starttime_);
  }

  // .google.protobuf.Timestamp endTime = 4;
  if (this->has_endtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endtime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExamDetail::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExamDetail*>(
      &from));
}

void ExamDetail::MergeFrom(const ExamDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.ExamDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additioninfo_.MergeFrom(from.additioninfo_);
  predictid_.MergeFrom(from.predictid_);
  if (from.examid().size() > 0) {
    _internal_set_examid(from._internal_examid());
  }
  if (from.examname().size() > 0) {
    _internal_set_examname(from._internal_examname());
  }
  if (from.has_starttime()) {
    _internal_mutable_starttime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_starttime());
  }
  if (from.has_endtime()) {
    _internal_mutable_endtime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_endtime());
  }
}

void ExamDetail::CopyFrom(const ExamDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.ExamDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExamDetail::IsInitialized() const {
  return true;
}

void ExamDetail::InternalSwap(ExamDetail* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  additioninfo_.Swap(&other->additioninfo_);
  predictid_.InternalSwap(&other->predictid_);
  examid_.Swap(&other->examid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  examname_.Swap(&other->examname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExamDetail, endtime_)
      + sizeof(ExamDetail::endtime_)
      - PROTOBUF_FIELD_OFFSET(ExamDetail, starttime_)>(
          reinterpret_cast<char*>(&starttime_),
          reinterpret_cast<char*>(&other->starttime_));
}

std::string ExamDetail::GetTypeName() const {
  return "student.ExamDetail";
}


// ===================================================================

class ExamResponse::_Internal {
 public:
};

ExamResponse::ExamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  pendingexams_(arena),
  finishedexams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:student.ExamResponse)
}
ExamResponse::ExamResponse(const ExamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      pendingexams_(from.pendingexams_),
      finishedexams_(from.finishedexams_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:student.ExamResponse)
}

void ExamResponse::SharedCtor() {
}

ExamResponse::~ExamResponse() {
  // @@protoc_insertion_point(destructor:student.ExamResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ExamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExamResponse::ArenaDtor(void* object) {
  ExamResponse* _this = reinterpret_cast< ExamResponse* >(object);
  (void)_this;
}
void ExamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:student.ExamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pendingexams_.Clear();
  finishedexams_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .student.ExamDetail pendingExams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pendingexams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .student.ExamDetail finishedExams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_finishedexams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.ExamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .student.ExamDetail pendingExams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pendingexams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pendingexams(i), target, stream);
  }

  // repeated .student.ExamDetail finishedExams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_finishedexams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_finishedexams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.ExamResponse)
  return target;
}

size_t ExamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.ExamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .student.ExamDetail pendingExams = 1;
  total_size += 1UL * this->_internal_pendingexams_size();
  for (const auto& msg : this->pendingexams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .student.ExamDetail finishedExams = 2;
  total_size += 1UL * this->_internal_finishedexams_size();
  for (const auto& msg : this->finishedexams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExamResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExamResponse*>(
      &from));
}

void ExamResponse::MergeFrom(const ExamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.ExamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pendingexams_.MergeFrom(from.pendingexams_);
  finishedexams_.MergeFrom(from.finishedexams_);
}

void ExamResponse::CopyFrom(const ExamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.ExamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExamResponse::IsInitialized() const {
  return true;
}

void ExamResponse::InternalSwap(ExamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  pendingexams_.InternalSwap(&other->pendingexams_);
  finishedexams_.InternalSwap(&other->finishedexams_);
}

std::string ExamResponse::GetTypeName() const {
  return "student.ExamResponse";
}


// ===================================================================

ModelPredict_ResultEntry_DoNotUse::ModelPredict_ResultEntry_DoNotUse() {}
ModelPredict_ResultEntry_DoNotUse::ModelPredict_ResultEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelPredict_ResultEntry_DoNotUse::MergeFrom(const ModelPredict_ResultEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class ModelPredict::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const ModelPredict* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ModelPredict::_Internal::time(const ModelPredict* msg) {
  return *msg->time_;
}
void ModelPredict::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
ModelPredict::ModelPredict(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:student.ModelPredict)
}
ModelPredict::ModelPredict(const ModelPredict& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_.MergeFrom(from.result_);
  examid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_examid().empty()) {
    examid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_examid(), 
      GetArena());
  }
  studentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_studentid().empty()) {
    studentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_studentid(), 
      GetArena());
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:student.ModelPredict)
}

void ModelPredict::SharedCtor() {
examid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
studentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_ = nullptr;
}

ModelPredict::~ModelPredict() {
  // @@protoc_insertion_point(destructor:student.ModelPredict)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ModelPredict::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  examid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  studentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
}

void ModelPredict::ArenaDtor(void* object) {
  ModelPredict* _this = reinterpret_cast< ModelPredict* >(object);
  (void)_this;
}
void ModelPredict::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelPredict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelPredict::Clear() {
// @@protoc_insertion_point(message_clear_start:student.ModelPredict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  examid_.ClearToEmpty();
  studentid_.ClearToEmpty();
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ModelPredict::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string examId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_examid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string studentId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_studentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, float> result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&result_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelPredict::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.ModelPredict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string examId = 1;
  if (this->examid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_examid().data(), static_cast<int>(this->_internal_examid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.ModelPredict.examId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_examid(), target);
  }

  // string studentId = 2;
  if (this->studentid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_studentid().data(), static_cast<int>(this->_internal_studentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.ModelPredict.studentId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_studentid(), target);
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time(this), target, stream);
  }

  // map<string, float> result = 4;
  if (!this->_internal_result().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "student.ModelPredict.ResultEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_result().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_result().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_result().begin();
          it != this->_internal_result().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelPredict_ResultEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->_internal_result().begin();
          it != this->_internal_result().end(); ++it) {
        target = ModelPredict_ResultEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.ModelPredict)
  return target;
}

size_t ModelPredict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.ModelPredict)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> result = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_result_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->_internal_result().begin();
      it != this->_internal_result().end(); ++it) {
    total_size += ModelPredict_ResultEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string examId = 1;
  if (this->examid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_examid());
  }

  // string studentId = 2;
  if (this->studentid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_studentid());
  }

  // .google.protobuf.Timestamp time = 3;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelPredict::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ModelPredict*>(
      &from));
}

void ModelPredict::MergeFrom(const ModelPredict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.ModelPredict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  if (from.examid().size() > 0) {
    _internal_set_examid(from._internal_examid());
  }
  if (from.studentid().size() > 0) {
    _internal_set_studentid(from._internal_studentid());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
}

void ModelPredict::CopyFrom(const ModelPredict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.ModelPredict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelPredict::IsInitialized() const {
  return true;
}

void ModelPredict::InternalSwap(ModelPredict* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  result_.Swap(&other->result_);
  examid_.Swap(&other->examid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  studentid_.Swap(&other->studentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_, other->time_);
}

std::string ModelPredict::GetTypeName() const {
  return "student.ModelPredict";
}


// ===================================================================

class GetPredictRequest::_Internal {
 public:
};

GetPredictRequest::GetPredictRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  predictid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:student.GetPredictRequest)
}
GetPredictRequest::GetPredictRequest(const GetPredictRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      predictid_(from.predictid_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:student.GetPredictRequest)
}

void GetPredictRequest::SharedCtor() {
}

GetPredictRequest::~GetPredictRequest() {
  // @@protoc_insertion_point(destructor:student.GetPredictRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetPredictRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPredictRequest::ArenaDtor(void* object) {
  GetPredictRequest* _this = reinterpret_cast< GetPredictRequest* >(object);
  (void)_this;
}
void GetPredictRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPredictRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPredictRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:student.GetPredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictid_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetPredictRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string predictId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_predictid();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPredictRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.GetPredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string predictId = 1;
  for (int i = 0, n = this->_internal_predictid_size(); i < n; i++) {
    const auto& s = this->_internal_predictid(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.GetPredictRequest.predictId");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.GetPredictRequest)
  return target;
}

size_t GetPredictRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.GetPredictRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string predictId = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(predictid_.size());
  for (int i = 0, n = predictid_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      predictid_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPredictRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetPredictRequest*>(
      &from));
}

void GetPredictRequest::MergeFrom(const GetPredictRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.GetPredictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictid_.MergeFrom(from.predictid_);
}

void GetPredictRequest::CopyFrom(const GetPredictRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.GetPredictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPredictRequest::IsInitialized() const {
  return true;
}

void GetPredictRequest::InternalSwap(GetPredictRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  predictid_.InternalSwap(&other->predictid_);
}

std::string GetPredictRequest::GetTypeName() const {
  return "student.GetPredictRequest";
}


// ===================================================================

GetPredictResponse_ResultEntry_DoNotUse::GetPredictResponse_ResultEntry_DoNotUse() {}
GetPredictResponse_ResultEntry_DoNotUse::GetPredictResponse_ResultEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetPredictResponse_ResultEntry_DoNotUse::MergeFrom(const GetPredictResponse_ResultEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class GetPredictResponse::_Internal {
 public:
};

GetPredictResponse::GetPredictResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:student.GetPredictResponse)
}
GetPredictResponse::GetPredictResponse(const GetPredictResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  result_.MergeFrom(from.result_);
  // @@protoc_insertion_point(copy_constructor:student.GetPredictResponse)
}

void GetPredictResponse::SharedCtor() {
}

GetPredictResponse::~GetPredictResponse() {
  // @@protoc_insertion_point(destructor:student.GetPredictResponse)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GetPredictResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPredictResponse::ArenaDtor(void* object) {
  GetPredictResponse* _this = reinterpret_cast< GetPredictResponse* >(object);
  (void)_this;
}
void GetPredictResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPredictResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPredictResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:student.GetPredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetPredictResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .student.ModelPredict> result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&result_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPredictResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.GetPredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .student.ModelPredict> result = 1;
  if (!this->_internal_result().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::student::ModelPredict >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "student.GetPredictResponse.ResultEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_result().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_result().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::student::ModelPredict >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::student::ModelPredict >::const_iterator
          it = this->_internal_result().begin();
          it != this->_internal_result().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetPredictResponse_ResultEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::student::ModelPredict >::const_iterator
          it = this->_internal_result().begin();
          it != this->_internal_result().end(); ++it) {
        target = GetPredictResponse_ResultEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.GetPredictResponse)
  return target;
}

size_t GetPredictResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.GetPredictResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .student.ModelPredict> result = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_result_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::student::ModelPredict >::const_iterator
      it = this->_internal_result().begin();
      it != this->_internal_result().end(); ++it) {
    total_size += GetPredictResponse_ResultEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPredictResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GetPredictResponse*>(
      &from));
}

void GetPredictResponse::MergeFrom(const GetPredictResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.GetPredictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
}

void GetPredictResponse::CopyFrom(const GetPredictResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.GetPredictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPredictResponse::IsInitialized() const {
  return true;
}

void GetPredictResponse::InternalSwap(GetPredictResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  result_.Swap(&other->result_);
}

std::string GetPredictResponse::GetTypeName() const {
  return "student.GetPredictResponse";
}


// ===================================================================

class MetaData::_Internal {
 public:
};

MetaData::MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:student.MetaData)
}
MetaData::MetaData(const MetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  examid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_examid().empty()) {
    examid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_examid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:student.MetaData)
}

void MetaData::SharedCtor() {
examid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MetaData::~MetaData() {
  // @@protoc_insertion_point(destructor:student.MetaData)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  examid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetaData::ArenaDtor(void* object) {
  MetaData* _this = reinterpret_cast< MetaData* >(object);
  (void)_this;
}
void MetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:student.MetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  examid_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* MetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string examId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_examid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.MetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string examId = 1;
  if (this->examid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_examid().data(), static_cast<int>(this->_internal_examid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "student.MetaData.examId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_examid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.MetaData)
  return target;
}

size_t MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.MetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string examId = 1;
  if (this->examid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_examid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MetaData*>(
      &from));
}

void MetaData::MergeFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.examid().size() > 0) {
    _internal_set_examid(from._internal_examid());
  }
}

void MetaData::CopyFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  return true;
}

void MetaData::InternalSwap(MetaData* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  examid_.Swap(&other->examid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string MetaData::GetTypeName() const {
  return "student.MetaData";
}


// ===================================================================

class StreamVideoRequest::_Internal {
 public:
  static const ::student::MetaData& metadata(const StreamVideoRequest* msg);
};

const ::student::MetaData&
StreamVideoRequest::_Internal::metadata(const StreamVideoRequest* msg) {
  return *msg->request_.metadata_;
}
void StreamVideoRequest::set_allocated_metadata(::student::MetaData* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    set_has_metadata();
    request_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:student.StreamVideoRequest.metadata)
}
StreamVideoRequest::StreamVideoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:student.StreamVideoRequest)
}
StreamVideoRequest::StreamVideoRequest(const StreamVideoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kMetadata: {
      _internal_mutable_metadata()->::student::MetaData::MergeFrom(from._internal_metadata());
      break;
    }
    case kChunkdata: {
      _internal_set_chunkdata(from._internal_chunkdata());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:student.StreamVideoRequest)
}

void StreamVideoRequest::SharedCtor() {
clear_has_request();
}

StreamVideoRequest::~StreamVideoRequest() {
  // @@protoc_insertion_point(destructor:student.StreamVideoRequest)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StreamVideoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void StreamVideoRequest::ArenaDtor(void* object) {
  StreamVideoRequest* _this = reinterpret_cast< StreamVideoRequest* >(object);
  (void)_this;
}
void StreamVideoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamVideoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamVideoRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:student.StreamVideoRequest)
  switch (request_case()) {
    case kMetadata: {
      if (GetArena() == nullptr) {
        delete request_.metadata_;
      }
      break;
    }
    case kChunkdata: {
      request_.chunkdata_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void StreamVideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:student.StreamVideoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<std::string>();
}

const char* StreamVideoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .student.MetaData metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chunkdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chunkdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamVideoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:student.StreamVideoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .student.MetaData metadata = 1;
  if (_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // bytes chunkdata = 2;
  if (_internal_has_chunkdata()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chunkdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:student.StreamVideoRequest)
  return target;
}

size_t StreamVideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:student.StreamVideoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .student.MetaData metadata = 1;
    case kMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.metadata_);
      break;
    }
    // bytes chunkdata = 2;
    case kChunkdata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunkdata());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamVideoRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StreamVideoRequest*>(
      &from));
}

void StreamVideoRequest::MergeFrom(const StreamVideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:student.StreamVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kMetadata: {
      _internal_mutable_metadata()->::student::MetaData::MergeFrom(from._internal_metadata());
      break;
    }
    case kChunkdata: {
      _internal_set_chunkdata(from._internal_chunkdata());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void StreamVideoRequest::CopyFrom(const StreamVideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:student.StreamVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamVideoRequest::IsInitialized() const {
  return true;
}

void StreamVideoRequest::InternalSwap(StreamVideoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string StreamVideoRequest::GetTypeName() const {
  return "student.StreamVideoRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace student
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::student::CommonGetRequest* Arena::CreateMaybeMessage< ::student::CommonGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::CommonGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::student::CommonGetResponse* Arena::CreateMaybeMessage< ::student::CommonGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::CommonGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::student::ExamDetail_AdditionInfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::student::ExamDetail_AdditionInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::ExamDetail_AdditionInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::student::ExamDetail* Arena::CreateMaybeMessage< ::student::ExamDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::ExamDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::student::ExamResponse* Arena::CreateMaybeMessage< ::student::ExamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::ExamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::student::ModelPredict_ResultEntry_DoNotUse* Arena::CreateMaybeMessage< ::student::ModelPredict_ResultEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::ModelPredict_ResultEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::student::ModelPredict* Arena::CreateMaybeMessage< ::student::ModelPredict >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::ModelPredict >(arena);
}
template<> PROTOBUF_NOINLINE ::student::GetPredictRequest* Arena::CreateMaybeMessage< ::student::GetPredictRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::GetPredictRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::student::GetPredictResponse_ResultEntry_DoNotUse* Arena::CreateMaybeMessage< ::student::GetPredictResponse_ResultEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::GetPredictResponse_ResultEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::student::GetPredictResponse* Arena::CreateMaybeMessage< ::student::GetPredictResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::GetPredictResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::student::MetaData* Arena::CreateMaybeMessage< ::student::MetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::MetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::student::StreamVideoRequest* Arena::CreateMaybeMessage< ::student::StreamVideoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::student::StreamVideoRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
